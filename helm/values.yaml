replicas: 1

image:
  fullname: aleveille/octant-dashboard:v0.18.0
  pullPolicy: IfNotPresent

keycloakGatekeeper:
  enabled: false
  url: ~
  clientId: ~
  clientSecret: ~
  port: ~

## Additional environment variables to set
extraEnvs: []
# extraEnvs:
#   - name: OCTANT_PLUGIN_PATH
#     value: /var/lib/octant-plugins
#   - name: FOO
#     valueFrom:
#       secretKeyRef:
#         key: FOO
#         name: secret-resource

extraVolumeMounts: []
## Additional volumeMounts to the main container.
#  - name: plugin-dir
#   mountPath: /var/lib/octant-plugins

extraVolumes: []
## Additional volumes to the pod.
#  - name: plugin-dir
#    emptyDir: {}

extraInitContainers: []
## Containers, which are run before the app containers are started.
# - name: init-myservice
#   image: busybox
#   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']

imagePullSecrets: ~

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: octant-readonly-sa

clusterRole:
  # Override the entire set of cluster roles, if not specified a default set of read-only-everything rules will be created
  rules: ~
  # Add additional rules to the default read-only-everything, this is ignored if clusterRole.rules is provided.
  additionalRules: ~

plugins:
  install: ~
  # Eg:
  #- https://github.com/aquasecurity/starboard-octant-plugin/releases/download/v0.6.0/starboard-octant-plugin_linux_x86_64.tar.gz
  #- https://github.com/bloodorangeio/octant-helm/releases/download/v0.1.0/octant-helm_0.1.0_linux_amd64.tar.gz
  dir:
    mount:
      emptyDir: {}
    mountPath: /home/octant/.config/octant/plugins/

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8000
  nodePort: 30010

ingress:
  enabled: false
  hosts: []
  tls: []

resources: {}
#  limits:
#    cpu: 500m
#    memory: 256Mi
#  requests:
#    cpu: 500m
#    memory: 256Mi

nodeSelector: {}

tolerations: []

affinity: {}
